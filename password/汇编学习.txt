阅读汇编代码的一些基本技巧
x86/x64 汇编看起来复杂，但抓住几个关键点就能看懂大概：

寄存器：eax/rax (累加器，常用于返回值), ebx/rbx (基地址寄存器), esp/rsp (栈指针), ebp/rbp (基址指针), ecx/rcx, edx/rdx, esi/rsi, edi/rdi。

常见指令：

mov eax, dword ptr [rcx+28h]：将 rcx 寄存器中的地址加上 0x28 偏移处的 4 字节数据移动到 eax。这通常是在访问对象的字段。

add / sub：加/减。

call：调用一个函数。

cmp / test：比较，后面通常跟条件跳转指令 jne (不等于跳转), je (等于跳转), jge (大于等于跳转) 等。

lea：计算有效地址，也常被用来做简单的算术运算。

关注循环和函数调用：循环在汇编中表现为一个cmp/test指令后跟一个条件跳转jxx回到前面的某个地址。函数调用会产生call和ret指令，并伴随栈操作（push/pop）。

总结
方法	适用场景	优点	缺点
VS 反汇编窗口	动态调试，理解代码在特定条件下的执行路径	实时、与源码行对应、可单步调试	需要启动调试，默认是未优化的 Debug 代码
SharpLab.io	静态分析，快速查看不同环境下（尤其是 Release）的优化结果	无需启动项目、可切换版本和配置、结果清晰	无法模拟复杂的运行时状态
对于大多数开发者来说，在 Debug 模式下使用 VS 的反汇编窗口 是入门和调试的最佳选择。当你需要进行深入的性能优化，想了解 Release 模式下的优化效果时，SharpLab.io 是你的不二之选。