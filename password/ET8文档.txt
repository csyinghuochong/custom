childof( parent )
public class son   //实体必须指明父实体


[componentof(typeof(scene))]
public class com   组件必须指明父实体的类型//


[entitysystemof(typeof(com))]  //扩展方法

friendof(com) 访问该类的方法


init.start.  CodeLoader开始分发（客户端。服务器）

Entry.Start  (前后端公用)


World.Instance.AddSingleton<ObjectPool>();

 // 创建需要reload的code singleton
 CodeTypes.Instance.CreateCode();

Fiber.Scene(Robot)  组件都是挂到scene上的

Fiber 是因为多线程多进程的原因  可以有很多个fiber

Fiber的public EntitySystem EntitySystem { get; }  驱动所有组件和子实体的生命周期函数

 public enum SchedulerType
 {
     Main,                //主线程就是队列循环调用
     Thread,            //固定线程调用 ，每个线程一个Fiber
     ThreadPool,    //线程池调用， 同一个Fiber只会在同一个时间段随机被某一个线程调用
 }
Fiber 生命周期的三种调用方式
Fiber和Fiber之间完全隔壁， 多个cpu驱动多个线程，多个线程驱动多个fiber

Fiber 和 Scene 相互引用

客户端一般只有两个Fiber(业务逻辑) Fiber(网络消息)

Scene是最近的Scene, robot是根Scene.


ET 公用  ET.Server 服务器用 ET.client 客户端用  EventType 必须放在allmodel



 [Event(SceneType.Demo)]    传入sceneType  只有处理该scenetype


#if DOTNET  服务器

研究一下 Fiber.Update 的三种调度方式 

LS开头的是帧同步

事件的处理不涉及到任何显示层 则放在hotfix下面

ActorId 指明了actor所在的进程和fider


DBComponent 加入到对应的scene

返回一个四元数，该四元数表示绕单位轴旋转一个以弧度为单位的角度。
quaternion.AxisAngle(math.up() , skillcmd.TargetAngle / 57.3f );

math.degrees()                                 弧度转角度
math.radians(skillcmd.TargetAngle)   角度转弧度



~    位逻辑非运算  如果某一位等于0，就将其转变为1；如果某一位等于1，就将其转变为0。   
^    位逻辑异或运算将两个运算对象按位进行异或运算。异或运算的规则是：1异或1等于0，1异或0等于1，0异或0等于0。即：相同得0，相异得1。  比如：10010001（二进制）^11110000（二进制）等于01100001（二进制）。
&    它用于对操作数的每一位进行按位与操作。‌如果两个相应的二进制位都为1，‌则该位的结果值为1；‌否则，‌结果值为0。‌例如，‌在二进制中执行1101010 & 1001010将得到结果1001010
|     比如10010001（二进制）| 11110000（二进制）等于11110001（二进制）。
<<    位左移运算  byte a=0x65(即二进制的01100101),将其左移3位：a<<3的结果是0x27(即二进制的00101000)。


UI系统框架, 以uipet举例
ModelView   	 DlgPet                                             	View{ public DlgPetViewComponent View }
UIBehaviour              DlgPetViewComponent                    	public Transform uiTransform = null;   

HotfixView                DlgPetSystem   			RegisterUIEvent   ShowWindow   {  self.View.ES_PetHeCheng.OnHeChengReturn(); }   逻辑全部写在这
                                 DlgPetEventHandler  		OnInitWindowCoreData / OnInitComponent / OnShowWindow / uiBaseWindow.AddComponent<DlgMain>().AddComponent<DlgPetViewComponent>(); 只有几个生命周期函数
UIBehaviour              DlgPetViewComponentSystem		self.DestroyWidget(); self.Awake 只有几个生命周期函数


//UIComponent.ShowWindow
 if (self.IScene is Room)
            {
                go = await self.Scene<Room>().GetComponent<ResourcesLoaderComponent>().LoadAssetAsync<GameObject>(value.StringToAB());
            }
            else
            {
                go = await self.Scene<Scene>().GetComponent<ResourcesLoaderComponent>().LoadAssetAsync<GameObject>(value.StringToAB());
            }
            baseWindow.UIPrefabGameObject      = UnityEngine.Object.Instantiate(go);
            baseWindow.UIPrefabGameObject.name = go.name;
            
            UIEventComponent.Instance.GetUIEventHandler(baseWindow.WindowID).OnInitWindowCoreData(baseWindow);
            
            baseWindow?.SetRoot(EUIRootHelper.GetTargetRoot(self.Root(),baseWindow.windowType));
            baseWindow.uiTransform.SetAsLastSibling();
            
            UIEventComponent.Instance.GetUIEventHandler(baseWindow.WindowID).OnInitComponent(baseWindow);
            UIEventComponent.Instance.GetUIEventHandler(baseWindow.WindowID).OnRegisterUIEvent(baseWindow);


Entity contextData = showData == null ? null : showData;
baseWindow.UIPrefabGameObject?.SetActive(true);
UIEventComponent.Instance.GetUIEventHandler(id).OnShowWindow(baseWindow,contextData);


LoopScrollRectBase : UIBehaviour, IInitializePotentialDragHandler, IBeginDragHandler, IEndDragHandler, IDragHandler, IScrollHandler, ICanvasElement, ILayoutElement, ILayoutGroup

LoopScrollRect : LoopScrollRectBase
LoopVerticalScrollRect : LoopScrollRect
LoopHorizontalScrollRect : LoopScrollRect

LoopScrollRectMulti : LoopScrollRectBase
LoopHorizontalScrollRectMulti : LoopScrollRectMulti   （UI/Loop Horizontal Scroll Rect(MultiPrefab)）
LoopVerticalScrollRectMulti : LoopScrollRectMulti


c# using 的用法
using (var file = File.Open("filePath", FileMode.OpenOrCreate))
{
    //do something
}

FileStream file = File.Open("filePath", FileMode.OpenOrCreate);
try
{
  //do something
}
finally
{
  if (file!= null)
  {
    ((IDisposable)file).Dispose();
  }
}


//ET携程锁
coroutineLockType=CoroutineLockType.MessageLocationSender = 2     key = 1211454955075324
public static async ETTask<CoroutineLock> Wait(this CoroutineLockComponent self, int coroutineLockType, long key, int time = 60000) 
		->root.GetComponent<CoroutineLockComponent>().Wait(CoroutineLockType.MessageLocationSender, entityId)


//CoroutineLockComponent 每一个携程锁类型对应child   id为携程锁类型  。 十种携程锁类型则CoroutineLockComponent有是个child
CoroutineLockQueueType coroutineLockQueueType = (CoroutineLockComponent) self.GetChild<CoroutineLockQueueType>(coroutineLockType) ?? self.AddChildWithId<CoroutineLockQueueType>(coroutineLockType);

//key=1211454955075324
await coroutineLockQueueType.Wait(key, time);
{
//每一种类型的携程锁coroutineLockQueueType  为每个key 分配一个child  = CoroutineLockQueue  的id为key   type为携程锁类型 即父对象coroutineLockQueueType的id
CoroutineLockQueue queue = (coroutineLockQueueType)self.AddChildWithId<CoroutineLockQueue, int>(key, (int)self.Id, true);

ETTask<CoroutineLock> Wait(this CoroutineLockQueue self, int time)

}

//当前携程锁队列为空 直接执行
self.isStart = true;
coroutineLock = self.AddChild<CoroutineLock, int, long, int>(self.type, self.Id, 1, true);
 return coroutineLock;

//当前携程锁队列不为空 ， 则加入队列
self.queue.Enqueue(waitCoroutineLock);

1 如果死锁了 则最多60秒后往下执行 （waitCoroutineLock.SetException(new Exception("coroutine is timeout!"));）  coroutineLock = await waitCoroutineLock.Wait();  return  coroutineLock    { do something }
2 没有死锁   using doing->  CoroutineLock.destory ->
                                           self.Scene<CoroutineLockComponent>().RunNextCoroutine(self.type, self.key, self.level + 1);  ->self.nextFrameRun.Enqueue((coroutineLockType, key, level));  把下一个放入队列
                  

// 上一个携程锁销毁后  会把下一个加入队列 循环过程中会有对象继续加入队列
            while (self.nextFrameRun.Count > 0)
            {
                (int coroutineLockType, long key, int count) = self.nextFrameRun.Dequeue();
                self.Notify(coroutineLockType, key, count);
            }

CoroutineLockQueueType coroutineLockQueueType = self.GetChild<CoroutineLockQueueType>(coroutineLockType);
CoroutineLockQueue queue = self.Get(key);


服务器流程：  
Entry.init ->
await World.Instance.AddSingleton<ConfigLoader>().LoadAsync();  //耗时8s
public class FiberInit_Main: AInvokeHandler<FiberInit, ETTask>
{
 await EventSystem.Instance.PublishAsync(root, new EntryEvent1());   //share
  await EventSystem.Instance.PublishAsync(root, new EntryEvent2()); //server
 await EventSystem.Instance.PublishAsync(root, new EntryEvent3()); //client
}
public class EntryEvent1_InitShare: AEvent<Scene, EntryEvent1>
{
root.AddComponent<ProcessInnerSender>();   //每个进程一个， 用来进程内线程之间通信 
}
public class EntryEvent2_InitServer : AEvent<Scene, EntryEvent2>
{
 StartProcessConfig startProcessConfig = StartProcessConfigCategory.Instance.Get(process);
                        if (startProcessConfig.InnerPort != 0)
                        {
	                //每个进程创建一个SceneType.NetInner, =-2的线程。该线程同样挂载ProcessInnerSender
                                await FiberManager.Instance.Create(SchedulerType.ThreadPool, ConstFiberId.NetInner, 0, SceneType.NetInner, "NetInner");

		//[Invoke((long)SceneType.NetInner)]   -2
		root.AddComponent<ProcessOuterSender, IPEndPoint>(startProcessConfig.IPEndPoint);
           		root.AddComponent<ProcessInnerSender>();
                        }

                        // 根据配置创建纤程
                        var processScenes = StartSceneConfigCategory.Instance.GetByProcess(process);
}

相同进程通信
await fiber.Root.GetComponent<ProcessInnerSender>().Call(actorId, request, needException: needException);

不同进程通信
using A2NetInner_Response a2NetInnerResponse = await fiber.Root.GetComponent<ProcessInnerSender>().Call(
                    new ActorId(fiber.Process, ConstFiberId.NetInner), a2NetInner_Request) as A2NetInner_Response;

NetComponent  注意一下两个组件
  // 挂上这个组件，5秒就会删除session，所以客户端验证完成要删除这个组件。该组件的作用就是防止外挂一直连接不发消息也不进行权限验证
session.AddComponent<SessionAcceptTimeoutComponent>();
// 客户端连接，2秒检查一次recv消息，10秒没有消息则断开
  session.AddComponent<SessionIdleCheckerComponent>();

登陆流程
C2R_LoginAccount   -> (Realm) tokenComponent.Add(centerAccountInfo.Account, Token, true);
C2R_GetRealmKey->    R2G_GetLoginKey->(Gate) scene.GetComponent<GateSessionKeyComponent>().Add(key.GetLongHashCode(), request.Account); ->return key gateadress
C2G_LoginGameGate ->


服务器架构：


客户端流程：
loader.init:   初始化全局word。  然后加载代码codeloader.loaddll
然后执行ET.Model.Share.Entry.start:{注册Mongo type  创建需要reload的code singleton 和 全局word  加载（single）配置表   }  抛出事件，创建 FiberInit_Main
FiberInit_Main
{
await EventSystem.Instance.PublishAsync(root, new EntryEvent1());     share root.AddComponent<TimerComponent>(); 全局组件
await EventSystem.Instance.PublishAsync(root, new EntryEvent2());     server
await EventSystem.Instance.PublishAsync(root, new EntryEvent3());     client
 	root.AddComponent<UIComponent>();  <PlayerComponent>();  root.SceneType = demo; 目前还只有一个mainfiber
  	 await EventSystem.Instance.PublishAsync(root, new AppStartInitFinish());
}


AppStartInitFinish_CreateLoginUI:
root.GetComponent<UIComponent>().ShowWindowAsync(WindowID.WindowID_MJLogin);
root.GetComponent<SceneManagerComponent>().ChangeScene(SceneTypeEnum.LoginScene, 0, 0);


开始登陆，创建Netclient纤程
self.fiberId = await FiberManager.Instance.Create(SchedulerType.ThreadPool, 0, SceneType.NetClient, "");
self.netClientActorId = new ActorId(self.Fiber().Process, self.fiberId); 

Netclient纤程内部：
Session session = await netComponent.CreateRouterSession(realmAddress, account, password);
 root.AddComponent<SessionComponent>().Session = session;

 // Netclient纤程  把消息扔到Main纤程队列中
 int parentFiberId = fiber.Root.GetComponent<FiberParentComponent>().ParentFiberId;
 fiber.Root.GetComponent<ProcessInnerSender>().Send(new ActorId(fiber.Process, parentFiberId), iActorMessage);


//软路由的牛逼之处：
CreateRouterSession(this NetComponent netComponent, IPEndPoint gateaddress, string account, string password)
await netComponent.Connect(routerInfo, address, localConn, remoteConn);

using RouterConnector routerConnector = netComponent.AddChildWithId<RouterConnector>(id);
Array.Copy(addressBytes, 0, sendCache, 13, addressBytes.Length);
routerConnector.Connect(sendCache, 0, addressBytes.Length + 13, routerAddress);
直连软路由， 把真实的ip地址也序列化发送给软路由， 再由软路由解析，发送给真正的ip

Session routerSession = netComponent.Create(routerAddress, address, recvLocalConn);
routerSession.AddComponent<PingComponent>();
routerSession.AddComponent<RouterCheckComponent>();

发现有ip 被攻击 则session.AService.ChangeAddress(sessionId, routerAddress);
session.AService.ChangeAddress(sessionId, routerAddress);
