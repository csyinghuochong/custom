SRP优先级比GPUinstancing高，你打开framedebug看啊
srp batcher是降低的每个dc的开销  降低的是set pass call，也就是状态切换的开销  srp batch会把一组带有相同state的dc打包成一个batch
srp batcher的作用是和批大量shader相同但是材质球和mesh都不同的场景
而不是一堆材质mesh都一模一样的玩意
你这种造的简易情况肯定是纯inatancing更好，但是真实的复杂场景却是srp batcher更好
GPU resident drawer确实能合dc   动态和批没卵用   但是srp batcher是真有用
引用某位大佬的话：特效做粒子的时候尽量填满画布 能不用半透明的时候就不用半透明 能用序列帧的时候就用序列帧而不是去增加发射数量 有时候用mesh渲染也比一堆sprite要省很多


////////////////打包
allCollectAssetInfos		[ 56个主asset ]
allBuildAssetInfoDic  	[ 全部asset 还有被引用的asset ]
allBuildAssetInfoDic                  [ 记录每个资源依赖的asset ]
allBuildAssetInfoDic[0] BuildAssetInfo   计算每一个asset 共享的budlename.   （列如res/image/1 res/image/2==>res/image）
所有的shade公用unityshaders.bundle 会打到同一个ab包内。。

buildassetinfo : 目前已经统计了每个asset的依赖资源和被引用资源。 以及bundlename...

注意：被引用次数小于1的资源不需要设置资源包名称, 这样就会把打到主asset中。
设置了bundlename则会被分开打包。。。。。 意思就是公共资源分开打包。。。

BuildMapContext context = new BuildMapContext();
想通的bundlename 会打打包到一起。。  key为bundle name..
private readonly Dictionary<string, BuildBundleInfo> _bundleInfoDic = new Dictionary<string, BuildBundleInfo>(10000);
多少个bundlename 。最终打包出来的就有多少个资源。


TaskPrepare 前期准备工作
TaskGetBuildMap  获取构建列表
TaskBuilding_SBP {包含21个ibuildtask} 开始执行构建   SwitchToBuildPlatform/RebuildSpriteAtlasCache/BuildPlayerScripts/GenerateBundleCommands
TaskCopyRawFile 拷贝原生文件
TaskVerifyBuildResult_SBP 验证构建结果
TaskEncryption 加密资源文件
TaskUpdateBundleInfo 更新补丁信息
TaskCreateManifest 创建清单文件
TaskCreateReport 创建报告文件
TaskCreatePackage 制作补丁包
TaskCopyBuildinFiles 拷贝内置文件

CreateDependAsset:  Assets/Bundles/Unit/Monster/310103.prefab  9

 "Address": "",
            "AssetPath": "Assets/Bundles/Unit/Monster/310103.prefab",
            "AssetGUID": "ba3b9e2af38b64949ac65ee9f35b2885",
            "AssetTags": [],
            "MainBundleName": "assets_bundles_unit_monster_310103.bundle",                 =>MainBundle
            "MainBundleSize": 6033,
            "DependBundles": [                                                                                          ==>DependBundles
                "share_assets_res_unit_player_hero_1.bundle",
                "share_assets_res_monsterset_suriyun_monster pack forest 2_animations_porin.bundle",
                "share_assets_res_unit_monster_animator.bundle",
                "share_assets_res_animgroup_monster.bundle",
                "share_assets_res_monsterset_suriyun_monster pack forest 2_fbx.bundle",
                "share_assets_res_monsterset_suriyun_monster pack forest 2_materials.bundle",
                "share_assets_res_monsterset_suriyun_monster pack forest 2_textures.bundle",
                "unityshaders.bundle",
                "share_assets_res_monsterset_suriyun_monster pack forest 2_prefab.bundle"
            ],




////////////////加载
this.Root().GetComponent<ResourcesLoaderComponent>().LoadAssetSync<GameObject>("Assets/Bundles/UI/Common/ES_JiaYuanMystery_A.prefab");
Resources.UnloadUnusedAssets().completed += async tmp =>
            {
                //    GC.Collect();
                GC.Collect(GC.MaxGeneration, GCCollectionMode.Forced);
                await Task.Yield();
                GC.WaitForPendingFinalizers();
            };


//操作类( 封装了ProviderBase )，上层记录的就是这个， 释放的也是这个。。。。。
OperationHandleBase  操作类基类    {  internal ProviderBase Provider ；  public float Progress {return Provider.Progress}；  internal void ReleaseInternal( Provider.ReleaseHandle ) ;  }
AllAssetsOperationHandle / AssetOperationHandle / RawFileOperationHandle / SceneOperationHandle / SubAssetsOperationHandle
AssetOperationHandle    {  public UnityEngine.Object AssetObject =》 return Provider.AssetObject; public void Release() { this.ReleaseInternal(); }  }
SceneOperationHandle   {  public Scene SceneObject { return Provider.SceneObject }   void UnloadAsync {  var operation = new UnloadSceneOperation(error);  } }
public static void ReleaseHandler(this ResourcesLoaderComponent self, OperationHandleBase handleBase)
case RawFileOperationHandle handle:
                    handle.Release();
                    break;
                case SceneOperationHandle handle:
                    if (!handle.IsMainScene())
                    {
                        handle.UnloadAsync();
                    }
                    break;


BundleLoaderBase    封装ProviderBase   { (构造ProviderBase调用)AddProvider(ProviderBase provider) {  _providers.Add(provider); }    (构造ProviderBase调用)void Reference(){RefCount++;}   
				void TryDestroyAllProviders(){ provider.Destroy() }    void Destroy(bool forceDestroy){ CacheBundle.Unload(true); }}
//loadbunld  BundledAssetProvider 才是loadasset;;;
AssetBundleFileLoader { void Update(){ _steps = ESteps.LoadFile;  CacheBundle = AssetBundle.LoadFromFile(FileLoadPath);  } }



//Provider  提供者 供应商    封装加载类
ProviderBase  	封装加载loadasset;  { 包含BundleLoaderBase list<BundleLoaderBase> }
internal abstract class ProviderBase  {   public string ProviderGUID;  public AssetInfo MainAssetInfo ;  public string RawFilePath ;   public int RefCount;  protected BundleLoaderBase OwnerBundle;
			           protected DependAssetBundles DependBundles;    impl.CreateDependAssetBundleLoaders(){ _loaderList.Add(loader); _loaderDic.Add(bundleName, loader); }   }
internal sealed class CompletedProvider : ProviderBase   {   }
internal sealed class BundledAssetProvider : ProviderBase {   private AssetBundleRequest _cacheRequest；  AssetObject = （BundleLoaderBase.CacheBundle）OwnerBundle.CacheBundle.LoadAsset(MainAssetInfo.AssetPath);  
					            Update(){ 检测状态！！if (DependBundles.IsDone()   if (OwnerBundle.IsDone()  InvokeCompletion() { _taskCompletionSource.TrySetResult(null); } ; }}
internal sealed class BundledAllAssetsProvider : ProviderBase

//卸载
 foreach (var kv in self.Handlers)
 self.ReleaseHandler(kv.Value.handler);  { OperationHandleBase 。{  handle.Release(); / handle.UnloadAsync();  === > Provider.ReleaseHandle(this){ --refcnt }; } }
for (int i = _loaderList.Count - 1; i >= 0; i--)
{
	BundleLoaderBase loader = _loaderList[i];
	loader.TryDestroyAllProviders();
}
if (loader.CanDestroy())
loader.Destroy(false);


ResourcesLoaderComponent.LoadAssetSync<T>
ResourcePackage.LoadAssetSync<TObject>(string location)				 return AssetOperationHandle
ResourcePackage.LoadAssetInternal(AssetInfo assetInfo, bool waitForAsyncComplete)  	 return AssetOperationHandle
OperationHandleBase handler = AssetSystemImpl.LoadAssetAsync(AssetInfo assetInfo)	                                                 return AssetOperationHandle
{
	ProviderBase provider = new BundledAssetProvider(this, providerGUID, assetInfo);
	return provider.CreateHandle<AssetOperationHandle>();  

	//
}

ResourcesLoaderComponent:
self.Handlers.Add(location, (handler, TimeInfo.Instance.ServerNow() + liveTime));
return (T)((AssetOperationHandle)handler).AssetObject;



//回调：   ProviderBase._taskCompletionSource.TrySetResult(null);         await handler.Task;     --------->>>>>return (T)((AssetOperationHandle)handler).AssetObject;




//释放流程：

self.Root().GetComponent<ResourcesLoaderComponent>().UnLoadAsset(VARIABLE);  确保主体引用为0


for (int i = 0; i < loopCount; i++)
{
	// 注意：资源包之间可能存在多层深层嵌套，需要多次循环释放。
	UnloadUnusedAssetsInternal();
}

private void UnloadUnusedAssetsInternal()
		{
			for (int i = _loaderList.Count - 1; i >= 0; i--)
			{
				BundleLoaderBase loader = _loaderList[i];
				loader.TryDestroyAllProviders();   // ProviderBase(主体引用为0.  则主bundle 和 依赖bundle引用计数-1)
			}

			for (int i = _loaderList.Count - 1; i >= 0; i--)
			{
				BundleLoaderBase loader = _loaderList[i];
				if (loader.CanDestroy())	//引用计数<=则 并且没有被其他主bundle引用 可以释放bunldle.  有可能循环第二次才能释放
				{
					string bundleName = loader.MainBundleInfo.Bundle.BundleName;
					loader.Destroy(false);
					_loaderList.RemoveAt(i);
					_loaderDic.Remove(bundleName);
				}
			}
		}



切场景的流程：  
M2C_StartSceneChangeHandler：
SceneChangeHelper.SceneChangeTo

CurrentScenesComponent currentScenesComponent = root.GetComponent<CurrentScenesComponent>();
currentScenesComponent.Scene?.Dispose(); // 删除之前的CurrentScene，创建新的  【 销毁所有unit，释放unit 的 asset 】


SceneChangeStart:
await uiComponent.ShowWindowAsync(WindowID.WindowID_Loading);
同时开启预加载。。。。。


await root.GetComponent<SceneManagerComponent>().ChangeScene(args.SceneType, args.LastSceneType, args.ChapterId);
{

	resourcesLoaderComponent.UnLoadAllAsset();	

	//场景加载完毕后才设置为true;;;     最好在ConfigData.LoadSceneFinished之后 再开始 dlgloading 预加载 okok
 	ConfigData.LoadSceneFinished = sceneTypeEnum!= SceneTypeEnum.LoginScene;
	//才开始加载unit gameobject;;;;

}

同时收到  M2C_CreateMyUnit m2CCreateMyUnit = waitCreateMyUnit.Message;

Collector Type
收集器类型：
MainAssetCollector 收集参与打包的主资源对象，并写入到资源清单的资源列表里（可以通过代码加载）。
StaticAssetCollector 收集参与打包的主资源对象，但不写入到资源清单的资源列表里（无法通过代码加载）。
DependAssetCollector 收集参与打包的依赖资源对象，但不写入到资源清单的资源列表里（无法通过代码加载）（当依赖资源没有被任何主资源引用的时候，则会在打包的时候自动剔除）。

DependAssetCollector【会打包成单个资源】
一个游戏的粒子特效的纹理会非常多，通常特效制作师会把这些纹理放到一个文件夹内管理。如果我们把这些纹理打进一个AssetBundle文件内，当下次更新的时候，
如果新增或改动了一个纹理，那么就要上传整个纹理的AssetBundle文件。我们可以把特效纹理通过DependAssetCollector收集器进行收集并自定义打包规则，通过文件名称的首字母进行小粒度打包，
这样一个AssetBundle文件会被拆分为26个AssetBundle文件。

StaticAssetCollector 【主资源的依赖资源不会成为share】
当我们需要严格控制某个文件夹内的依赖资源打进同一个AssetBundle文件内，那么StaticAssetCollector收集器是最佳选择，该收集器收集的资源，
无论是否被其它资源引用或被多个资源引用，这些资源都会按照设定的打包规则打包，且这些资源不会被处理为share资源包。


AddressRule

可寻址规则，规则可以自定义扩展。下面是内置规则：

AddressByFileName 以文件名为定位地址。
AddressByFilePath 以文件路径为定位地址。
AddressByGrouperAndFileName 以分组名+文件名为定位地址。
AddressByFolderAndFileName 以文件夹名+文件名为定位地址。
//自定义扩展范例
public class AddressByFileName : IAddressRule
{
    string IAddressRule.GetAssetAddress(AddressRuleData data)
    {
        return Path.GetFileNameWithoutExtension(data.AssetPath);
    }
}


ackRule

打包规则，规则可以自定义扩展。下面是内置规则：

PackSeparately 以文件路径作为资源包名，每个资源文件单独打包。
PackDirectory 以文件所在的文件夹路径作为资源包名，该文件夹下所有文件打进一个资源包。
PackTopDirectory 以收集器下顶级文件夹为资源包名，该文件夹下所有文件打进一个资源包。
PackCollector 以收集器路径作为资源包名，收集的所有文件打进一个资源包。
PackGroup 以分组名称作为资源包名，收集的所有文件打进一个资源包。
PackRawFile 目录下的资源文件会被处理为原生资源包。
public class PackDirectory : IPackRule
{
    PackRuleResult IPackRule.GetPackRuleResult(PackRuleData data)
    {
        //"Assets/Config/test.txt" --> "Assets/Config"
        string bundleName = Path.GetDirectoryName(data.AssetPath);
        PackRuleResult result = new PackRuleResult(bundleName, DefaultPackRule.AssetBundleFileExtension);
        return result;   
    }
}


FilterRule

过滤规则，规则可以自定义扩展。下面是内置规则：

CollectAll 收集目录下的所有资源文件
CollectScene 只收集目录下的场景文件
CollectPrefab 只收集目录下的预制体文件
CollectSprite 只收集目录下的精灵类型的文件
//自定义扩展范例
public class CollectScene : IFilterRule
{
    public bool IsCollectAsset(FilterRuleData data)
    {
        return Path.GetExtension(data.AssetPath) == ".unity";
    }
}















