shader基础：：：：
光线由光源发射出来后，就会与一些物体相交，通常有两个结果：散射 和 吸收。。
散射只改变光线的方向，但不改变光线的密度和颜色，   
           	光线在经过物体表面散射后，一般有两种方向，一种就会散射到物体内部，称为折射或者透射，另一种散射到外部，称为反射。
                对于不透明物体，折射进入物体内部的光线还会继续与内部的颗粒相交，有一些光线会重新发射出表面，另一些被吸收。那些重新发射出来的光线具有和入射光线不同的方向和颜色。

	为了区分这两种不同的散射方向，高光反射部分是表示物体表面如何反射光线的。 漫反射则表示有多少光线会被折射吸收和散射出表面。
	标准光照模型只关心直接光照，也就是那些直接从光源反射出来照射到物体表面后，经过物体表面的一次反射直接进入摄像机的光线。
	四种光线不同的计算方法：自发光（发射多少辐射量） 高光反射(光线在模型表面反射多少辐射量)  漫反射(向每个方向散射多少辐射量)  环境光(所有的间接光照)。
而吸收只改变光线的密度和颜色，但不改变光线的方向。

TransformObjectToHClip：将物体空间中的顶点位置转换到裁剪空间，结果存储在 output.position 中。
这里使用 TransformObjectToWorldNormal 将物体的法线转换为世界空间中的法线。
然后通过 TransformWorldToViewDir 将世界空间中的法线转换为视图空间中的方向（视点方向）。
SAMPLE_TEXTURE2D：用于从纹理中采样颜色。我们根据传递的纹理坐标 input.uv 采样主纹理

o.worldNormal = mul((float3x3)_Object2World,v.normal);//游戏中正常的法向量转换，转换后法向量可能不与原切线垂直，但是不影响游戏显示，而且大部分显示也是差不多的。一般用这个就行了。
o.worldNormal = mul(v.normal, (float3x3)_World2Object);顶点法向量从模型空间转换到世界空间的精确算法，公式是用_Object2World该矩阵的逆转置矩阵去转换法线。然后通过换算得到该行。

‌float3 WorldSpaceViewDir(float4 v)函数在Unity Shader中的作用是计算从模型空间中的某个点到摄像机的观察方向‌。具体来说，该函数输入一个模型空间中的顶点位置，返回该点到摄像机的观察方向向量。
这对于实现光照计算、阴影效果以及各种基于视线的特效（如反射、折射等）。
‌float3 UnityWorldSpaceViewDir(float4 v)函数的作用是获取世界空间中从给定点到摄像机的观察方向。
float3 ObjSpaceViewDir(float4 v)输入一个模型空间的顶点位置，返回模型空间中从该点到摄像机的观察方向。
float3 WorldSpaceLightDir(float4 v)仅可用于向前渲染中。输入一个模型空间的顶点位置，返回世界空间中从该点到光源的光照方向。



                        
原文链接：https://blog.csdn.net/shijunwei0326/article/details/144006228

向量点乘：
表征或计算两个向量之间的夹角
b向量在a向量方向上的投影
a∙b>0→方向基本相同，夹角在0°到90°之间 
a∙b=0→ 正交，相互垂直 
a∙b<0→ 方向基本相反，夹角在90°到180°之间

向量叉乘
概括地说，两个向量的外积，又叫叉乘、叉积向量积，其运算结果是一个向量而不是一个标量。并且两个向量的外积与这两个向量组成的坐标平面垂直。
在三维几何中，向量a和向量b的外积结果是一个向量，有个更通俗易懂的叫法是法向量，该向量垂直于a和b向量构成的平面。
在3D图像学中，外积的概念非常有用，可以通过两个向量的外积，生成第三个垂直于a，b的法向量，从而构建X、Y、Z坐标系。

顶点着色器：坐标变换和逐顶点光照，将顶点空间转换到齐次裁剪空间。

GrabPass截屏
GrabPass {} // 截图通道, 后面使用_GrabTexture访问截屏纹理
可以用来截屏，截屏后把纹理传给下一个通道使用。

1:使用抓屏通道, GrabPass {} 或 GrabPass { “ 纹理名称”}; 使用GrabPass {}后，可以用_GrabTexture访问截屏的纹理
2: 后续的Pass通道使用这个抓屏;

在Unity中，Shader中的mul操作主要是指矩阵与向量的乘法，用于实现几何变换。‌
具体来说，mul函数表示矩阵M和向量V进行点乘，得到一个向量Z，这个向量Z是对向量V进行矩阵变换后得到的值。这种操作在Shader编程中非常常见，用于实现各种几何变换，如平移、旋转和缩放等‌

顶点着色器最基本的任务就是把顶点位置从模型空间转换到裁减空间。因此我们需要使用unity内置的 模型*世界*投影矩形 UNITY_MATRIX_MVP

逐顶点光照： 把光照计算放在顶点着色器。
逐像素光照： 把光照计算放在面片着色器。

unity shader api  文档。
https://docs.unity3d.com/cn/2017.4/Manual/SL-VertexFragmentShaderExamples.html

unity常用函数库：：：：
https://www.cnblogs.com/victor2k/articles/13677342.html
saturate(x)的作用是如果x取值小于0,则返回值为0
saturate(x)的作用是如果x取值小于0，则返回值为0。如果x取值大于1，则返回值为1。若x在0到1之间，则直接返回x的值。
看出lerp函数用于混合纹理，参数1，2来tex2D方法获取的纹理采样坐标，参数3的范围是[0, 1]，用于确定参数1、2之间的插值作为混合值。
smoothstep可以用来生成0到1的平滑过渡值，它也叫平滑阶梯函数。
‌any函数在Unity Shader中的作用是测试输入值中的任何非零值。‌如果输入值中有任何一个不为0，则返回true；否则返回false。这个函数在处理向量或数组时非常有用，可以快速判断是否存在非零元素‌。



粒子系统：：：：
Billboard：粒子始终面向摄像机，无论摄像机的位置如何。常用于烟雾、火焰等效果。
Stretched Billboard：粒子以拉伸的方式呈现，通常用于尾迹效果，如火箭尾焰、子弹轨迹等。你可以调整拉伸参数使效果更合适。
Horizontal Billboard：粒子始终与地面平行，适用于地面雾气、水面波纹等效果。
Vertical Billboard：粒子始终垂直于地面，适用于一些特殊的视觉效果。
Mesh：粒子呈现为 3D 模型（网格），可以选择自定义的 Mesh（网格）作为粒子外形。


