编译器就是一个程序它可以阅读以某一种语言编写的程序，并把该程序翻译成一个等价的用另外一个语言目标语言编写的程序吗
编译器的重要任务之一就是报告它在翻译过程中发现的源程序中的错误
解释器是另外一种常见的语言处理器，它并不是通过翻译的方式产生目标程序，从用户的角度看，解释器直接利用用户提供的输入执行源程序中指定的操作。
在把用户输入映射成为输出的过程中，由一个编译器产生的机器语言目标程序通常比一个解释器快很多，然而，解释器的错误诊断效果通常比编译器更好。因为它逐个语句执行源代码
java语言处理器结合了编译和解释过程，一个java源程序首先被编译成一个成为字节码bytecode的中间表示程序，然后由一个虚拟机对得到的字节码加以解释执行。这样安排的好处之一
是在一台机器上编译得到的字节码可以在另外一台机器上解释执行。
为了更快的完成输入到输出的处理，有些被称为即时编译器的just in time的java编译器在运行中间程序处理输入的前一刻首先把字节码翻译成机器语言，然后再执行程序。
除了编译器之外，创建一个可执行的目标程序还需要一些其他程序，一个源程序可能被分割成多个模块，并存放在独立的文件中，把源程序聚合在一起的任务有时候由一个预处理器的程序完成，
预处理器还负责把那些称为宏的缩写形式转换为源语言的语句
大型程序经常被分成多个部分重新编译，因此，可重定位的机器代码有必要和其他可重定位的目标文件以及库文件连接到一起。形成真正的在机器上运行的代码。一个文件中的代码可能指向另外一个文件中的位置
而连接器能够解决外部内存地址的问题，最后，加载器把所有的可执行目标文件放到内存中指向。
