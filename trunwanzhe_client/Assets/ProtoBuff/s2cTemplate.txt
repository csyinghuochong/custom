/**
 *  (自动生成，请勿编辑！)
 */

using System;
using System.IO;
using System.Collections.Generic;
using PROTO;
using pb_common;
using ProtoBuf;

namespace Assets.Scripts.Com.Net.Protos.Proto
{
    public class S2C
    {
        public static Dictionary<int, string> descList = new Dictionary<int, string>();
        private static PBNetCMDData<T> CreateNetCMDData<T>(int key, string desc) where T : global::ProtoBuf.IExtensible, new()
        {
            descList[key] = desc;
            return new PBNetCMDData<T>(key);
        }


        //public const int CMD_1_0 = 256; // 心跳 : LoginHeartMsg_1_0
        //public static readonly PBNetCMDData<pbBossState> CLS_1_0 = CreateNetCMDData<pbBossState>(CMD_1_0, "心跳 : LoginHeartMsg_1_0");

		{0}
    }

    public interface IPBNetCMDData
    {
        bool HasAction();
        int GetKey();
        void Read(byte[] buff);
        void ReadObject(object t, List<IRemoteCall> parseObj);
        void PreRead(byte[] buff, out object outT, out List<IRemoteCall> outParseObj);
    }

    public class PBNetCMDData<T> : IPBNetCMDData where T : new()
    {
        private int mKey;
        private Type mDataType;

        private Action<T> mActionList;
        public IPBNetCMDData AddAction(Action<T> action)
        {
            if (mActionList == null && action != null)
            {
                mActionList = action;

                return this;
            }

            return null;
        }

        private Action<T, List<IRemoteCall>> mThreadAction;
        private Func<T, List<IRemoteCall>> mParsePackFunc;
        public IPBNetCMDData AddThreadAction(Action<T, List<IRemoteCall>> action, Func<T, List<IRemoteCall>> parsePackFunc)
        {
            if (mThreadAction == null && action != null && parsePackFunc != null)
            {
                mThreadAction = action;
                mParsePackFunc = parsePackFunc;
                return this;
            }

            return null;
        }

        public PBNetCMDData(int key)
        {
            this.mKey = key;

            mDataType = typeof(T);
        }

        public bool HasAction()
        {
            return mActionList != null || mThreadAction != null;
        }

        public int GetKey()
        {
            return this.mKey;
        }

        public void Read(byte[] buff)
        {
            if (HasAction())
            {
                mActionList(Deserialize(buff));
            }
        }

        public void ReadObject(object t, List<IRemoteCall> parseObj)
        {
            if (parseObj == null)
            {
                mActionList((T)t);
            }
            else
            {
                mThreadAction((T)t, parseObj);
            }
        }

        public void PreRead(byte[] buff, out object outT, out List<IRemoteCall> outParseObj)
        {
            T t = Deserialize(buff);

            outT = t;
            if (mParsePackFunc != null)
            {
                outParseObj = mParsePackFunc(t);
            }
            else
            {
                outParseObj = null;
            }
        }

        private T Deserialize(byte[] buff)
        {
            using (MemoryStream ms = new MemoryStream(buff.Length))
            {
                ms.Write(buff, 0, buff.Length);
                ms.Position = 0;
                return Serializer.Deserialize<T>(ms);
            }
        }
    }

}